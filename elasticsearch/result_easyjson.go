// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package elasticsearch

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch(in *jlexer.Lexer, out *Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_scroll_id":
			out.ScrollID = string(in.String())
		case "took":
			out.Took = int(in.Int())
		case "timed_out":
			out.TimedOut = bool(in.Bool())
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.HitSet = nil
			} else {
				if out.HitSet == nil {
					out.HitSet = new(HitSet)
				}
				(*out.HitSet).UnmarshalEasyJSON(in)
			}
		case "aggregations":
			if in.IsNull() {
				in.Skip()
				out.Aggregations = nil
			} else {
				if out.Aggregations == nil {
					out.Aggregations = new(Aggregations)
				}
				(*out.Aggregations).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch(out *jwriter.Writer, in Result) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ScrollID != "" {
		const prefix string = ",\"_scroll_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ScrollID))
	}
	{
		const prefix string = ",\"took\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Took))
	}
	{
		const prefix string = ",\"timed_out\":"
		out.RawString(prefix)
		out.Bool(bool(in.TimedOut))
	}
	{
		const prefix string = ",\"hits\":"
		out.RawString(prefix)
		if in.HitSet == nil {
			out.RawString("null")
		} else {
			(*in.HitSet).MarshalEasyJSON(out)
		}
	}
	if in.Aggregations != nil {
		const prefix string = ",\"aggregations\":"
		out.RawString(prefix)
		(*in.Aggregations).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch(l, v)
}
func easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch1(in *jlexer.Lexer, out *HitSetTotal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch1(out *jwriter.Writer, in HitSetTotal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HitSetTotal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HitSetTotal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HitSetTotal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HitSetTotal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch1(l, v)
}
func easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch2(in *jlexer.Lexer, out *HitSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			(out.Total).UnmarshalEasyJSON(in)
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				in.Delim('[')
				if out.Hits == nil {
					if !in.IsDelim(']') {
						out.Hits = make([]Hit, 0, 2)
					} else {
						out.Hits = []Hit{}
					}
				} else {
					out.Hits = (out.Hits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Hit
					(v1).UnmarshalEasyJSON(in)
					out.Hits = append(out.Hits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch2(out *jwriter.Writer, in HitSet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		(in.Total).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"hits\":"
		out.RawString(prefix)
		if in.Hits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Hits {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HitSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HitSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HitSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HitSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch2(l, v)
}
func easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch3(in *jlexer.Lexer, out *Hit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		case "_source":
			if in.IsNull() {
				in.Skip()
				out.Details = nil
			} else {
				if out.Details == nil {
					out.Details = new(Details)
				}
				(*out.Details).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch3(out *jwriter.Writer, in Hit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"_source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Details == nil {
			out.RawString("null")
		} else {
			(*in.Details).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Hit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Hit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Hit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Hit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch3(l, v)
}
func easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch4(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Msg":
			out.Msg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch4(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Msg\":"
		out.RawString(prefix[1:])
		out.String(string(in.Msg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch4(l, v)
}
func easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch5(in *jlexer.Lexer, out *Details) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		case "ACCOUNTING_NAME":
			out.AccountingName = string(in.String())
		case "AVAIL_CPU_TIME_SEC":
			out.AvailCPUTimeSec = int64(in.Int64())
		case "BOM":
			out.BOM = string(in.String())
		case "Command":
			out.Command = string(in.String())
		case "JOB_NAME":
			out.JobName = string(in.String())
		case "Job":
			out.Job = string(in.String())
		case "MEM_REQUESTED_MB":
			out.MemRequestedMB = int64(in.Int64())
		case "MEM_REQUESTED_MB_SEC":
			out.MemRequestedMBSec = int64(in.Int64())
		case "NUM_EXEC_PROCS":
			out.NumExecProcs = int64(in.Int64())
		case "PENDING_TIME_SEC":
			out.PendingTimeSec = int64(in.Int64())
		case "QUEUE_NAME":
			out.QueueName = string(in.String())
		case "RUN_TIME_SEC":
			out.RunTimeSec = int64(in.Int64())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "USER_NAME":
			out.UserName = string(in.String())
		case "WASTED_CPU_SECONDS":
			out.WastedCPUSeconds = float64(in.Float64())
		case "WASTED_MB_SECONDS":
			out.WastedMBSeconds = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch5(out *jwriter.Writer, in Details) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.AccountingName != "" {
		const prefix string = ",\"ACCOUNTING_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountingName))
	}
	if in.AvailCPUTimeSec != 0 {
		const prefix string = ",\"AVAIL_CPU_TIME_SEC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AvailCPUTimeSec))
	}
	if in.BOM != "" {
		const prefix string = ",\"BOM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BOM))
	}
	if in.Command != "" {
		const prefix string = ",\"Command\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Command))
	}
	if in.JobName != "" {
		const prefix string = ",\"JOB_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JobName))
	}
	if in.Job != "" {
		const prefix string = ",\"Job\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Job))
	}
	if in.MemRequestedMB != 0 {
		const prefix string = ",\"MEM_REQUESTED_MB\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MemRequestedMB))
	}
	if in.MemRequestedMBSec != 0 {
		const prefix string = ",\"MEM_REQUESTED_MB_SEC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MemRequestedMBSec))
	}
	if in.NumExecProcs != 0 {
		const prefix string = ",\"NUM_EXEC_PROCS\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NumExecProcs))
	}
	if in.PendingTimeSec != 0 {
		const prefix string = ",\"PENDING_TIME_SEC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PendingTimeSec))
	}
	if in.QueueName != "" {
		const prefix string = ",\"QUEUE_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.QueueName))
	}
	if in.RunTimeSec != 0 {
		const prefix string = ",\"RUN_TIME_SEC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RunTimeSec))
	}
	if in.Timestamp != 0 {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Timestamp))
	}
	if in.UserName != "" {
		const prefix string = ",\"USER_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	if in.WastedCPUSeconds != 0 {
		const prefix string = ",\"WASTED_CPU_SECONDS\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.WastedCPUSeconds))
	}
	if in.WastedMBSeconds != 0 {
		const prefix string = ",\"WASTED_MB_SECONDS\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.WastedMBSeconds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Details) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Details) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Details) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Details) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch5(l, v)
}
func easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch6(in *jlexer.Lexer, out *Buckets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "buckets":
			if in.IsNull() {
				in.Skip()
				out.Buckets = nil
			} else {
				in.Delim('[')
				if out.Buckets == nil {
					if !in.IsDelim(']') {
						out.Buckets = make([]interface{}, 0, 4)
					} else {
						out.Buckets = []interface{}{}
					}
				} else {
					out.Buckets = (out.Buckets)[:0]
				}
				for !in.IsDelim(']') {
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					out.Buckets = append(out.Buckets, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch6(out *jwriter.Writer, in Buckets) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Buckets) != 0 {
		const prefix string = ",\"buckets\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v5, v6 := range in.Buckets {
				if v5 > 0 {
					out.RawByte(',')
				}
				if m, ok := v6.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v6.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v6))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Buckets) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Buckets) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Buckets) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Buckets) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch6(l, v)
}
func easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch7(in *jlexer.Lexer, out *Aggregations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stats":
			if in.IsNull() {
				in.Skip()
				out.Stats = nil
			} else {
				if out.Stats == nil {
					out.Stats = new(Buckets)
				}
				(*out.Stats).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch7(out *jwriter.Writer, in Aggregations) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Stats != nil {
		const prefix string = ",\"stats\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Stats).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Aggregations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Aggregations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3b49167EncodeGithubComWtsiHgiGoFarmerElasticsearch7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Aggregations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Aggregations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3b49167DecodeGithubComWtsiHgiGoFarmerElasticsearch7(l, v)
}
